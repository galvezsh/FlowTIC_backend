package com.galvezsh.flowtic.model.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

/**
 * Ticket entity representing an issue or request in the IT department.
 * It is mapped to the "tickets" table in the database.
 */
@Entity
@Table(name = "tickets")
@Getter @Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Ticket {

    /**
     * Primary key, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Short identifier for the ticket.
     * Equivalent to VARCHAR2 in SQL, can be duplicated.
     */
    @Column(nullable = false, length = 255)
    private String title;

    /**
     * Detailed description of the issue.
     * Equivalent to VARCHAR2 / TEXT in SQL, can be empty.
     */
    @Column(columnDefinition = "TEXT")
    private String description;

    /**
     * Ticket status, can be OPEN, IN_PROGRESS, or CLOSED.
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Status status;

    /**
     * Priority level of the ticket.
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Priority priority;

    /**
     * Optional field that indicates who the ticket is assigned to.
     */
    private String assignedTo;

    /**
     * Optional field that indicates the solution of the problem.
     */
    @Column(columnDefinition = "TEXT")
    private String solution;

    /**
     * Creation timestamp, automatically set when the entity is persisted.
     */
    @Column(nullable = false)
    private LocalDateTime createdAt;

    /**
     * Modification timestamp, automatically set when the entity is modified using HTTP-PUT.
     */
    private LocalDateTime modifiedAt;

    /**
     * Automatically initialize createdAt and default status before persisting.
     */
    @PrePersist
    public void prePersist() {
        this.createdAt = LocalDateTime.now();
        if (status == null) status = Status.OPEN;
        if (priority == null) priority = Priority.MEDIUM;
    }

    @PreUpdate
    public void preUpdate() {
        this.modifiedAt = LocalDateTime.now();
    }

    /**
     * Enum for the possible states of a ticket.
     */
    public enum Status {
        OPEN,           // Newly created ticket
        IN_PROGRESS,    // Work has started
        ON_HOLD,        // Paused / waiting
        CLOSED,         // Completed and closed
        NOT_SOLVED,     // Cannot be solved
        CANCELLED       // Just cancelled
    }

    /**
     * Priority levels for a ticket.
     */
    public enum Priority {
        LOW,        // Not urgent
        MEDIUM,     // Normal priority
        HIGH,       // Important
        CRITICAL,   // Major impact
        BLOCKER     // Business blocked, must be fixed immediately
    }

    // Getters and setters (can be generated with Lombok)
}

